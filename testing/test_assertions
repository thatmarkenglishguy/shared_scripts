#!/usr/bin/env bash

function assert_exited_with_success() {
  local description
  local exit_code

  description="${1}"
  if [ -z "${description}" ]
  then
    echo 'assert_exited_with_success expects a description as first parameters.'
    exit_code=2
  else
    shift

    if [[ ! "${1}" =~ ^-?[0-9]+$ ]]
    then
      echo 'You seem to be asserting without passing an exit code.' >&2
      echo "What is: '${1}'" >&2
      exit_code=1
    else
      exit_code=${1}
      if [[ ${1} -ne 0 ]]
      then
        echo "ERROR ${description} exited with '${1}'" >&2
      else
        echo "SUCCESS ${description}"
      fi
    fi
  fi

  return ${exit_code}
}

function assert_contains_text() {
  local description
  local text
  exit_code=0

  description="${1}"
  if [ -z "${description}" ]
  then
    echo 'assert_contains_text expects a description as the first parameter' >&2
    exit_code=-1
  else
    shift
    text="${1}"

    if [ -z "${text}" ]
    then
      echo 'assert_contains_text expected some text as the second parameter.' >&2
      exit_code=-2
    elif [ -z "${2}" ]
    then
      echo 'assert_contains_text expected some text to check for.' >&2
      exit_code=-3
    else
      shift

      for check in "${@}"
      do
        if [[ ! "${text}" = *"${check}"* ]]
        then
          (( exit_code += 1 ))
          echo "Failure: ${check} not found" >&2
        fi
      done

      if [ ${exit_code} != 0 ]
      then
        echo "FAILED ${description} with ${exit_code} missing strings" >&2
      else
        echo "SUCCESS ${description}"
      fi
    fi
  fi

  return ${exit_code}
}

run_tests=1

function assert_result_fails_with_error_text() {
  # E.g. assert_result_fails_with_error_text "$(my_function 2>&1)" ${?} 'expected some arguments' 'my_function no args'

  # Set global run_tests variable to 0 to turn off tests.
  # Add 1 as final parameter to force test to execute when run_tests is 0.
  local result
  local exit_code
  local error_text
  local name
  local _run_tests
  local assert_exit_code
  assert_exit_code=0
  result=${1}
  if [ ${assert_exit_code} -eq 0 ] && [ -z "${1}" ]
  then
    echo 'Result text not supplied' >&2
    assert_exit_code=1
  fi

  shift
  exit_code=${1}
  if [ ${assert_exit_code} -eq 0 ] && [[ ! "${1}" =~ ^-?[0-9]+$ ]]
  then
    echo 'Exit code not supplied' >&2
    assert_exit_code=2
  fi

  shift
  error_text=${1}
  if [ ${assert_exit_code} -eq 0 ] && [ -z "${1}" ]
  then
    echo 'Error text not supplied' >&2
    assert_exit_code=3
  fi


  shift
  name=${1}
  if [ ${assert_exit_code} -eq 0 ] && [ -z "${1}" ]
  then
    echo 'Name not supplied' >&2
    assert_exit_code=4
  fi


  if [ ${assert_exit_code} -eq 0 ]
  then
    shift
    _run_tests=${1:-${run_tests}}

    if [ ${_run_tests} -eq 1 ]
    then
      if [ ${exit_code} -eq 0 ]
      then
        echo "Expected ${name} to fail, but it succeeded !"
      else
        if [[ "${result}" = *"${error_text}"* ]]
        then
          echo "${name} failed as expected. exit_code = ${exit_code}"
        else
          echo "${name} failed but does not contain '${error_text}'. exit_code = ${exit_code}"
        fi
      fi
    fi
  fi

  return ${assert_exit_code}
}
