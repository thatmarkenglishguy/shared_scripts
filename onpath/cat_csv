#!/usr/bin/env bash

#Deduce this script's directory
if [ -z ${BASH_SOURCE} ]; then
  script_dir=$(readlink -f $(dirname "${0}"))
else
  script_dir="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

declare -a args
args=( "${@}" )
declare -a extra_args
extra_args=()

declare -a default_extra_args
default_target_dir='.'
default_extra_args=( '-name' '*.csv' )

function usage() {
  local program_name
  program_name="$(basename "${0}")"

  cat <<-EOF
${program_name} [--output OUTPUT_FILE] [TARGET_DIR] [FIND_PARAMETERS...]
cat all the first file, and remove first line of remaining files.
If specified write output to OUTPUT_FILE and exclude it from parsing.

Parameters:
  --output OUTPUT_FILE If specified, don't write to stdout. Write to specified file.
                       Excludes file as potential input.
  TARGET_DIR           If specified search for files in directory. Defaults to '${default_target_dir}'.
  FIND_PARAMETERS      Any other parameters are passed to find. Defaults to '${default_extra_args[@]}'.

e.g.
# Find all the csv files in the current directory and output them as a single large csv file (relies on defaults)
${program_name} --output big.csv

# Same as above...
# Find all the csv files in the current directory and output them as a single large csv file (explicit parameters).
${program_name} . -name '*.csv' --output big.csv

EOF
}

for ((i=0; i<${#args[@]}; ++i))
do
  arg="${args[${i}]}"
  case "${arg}" in
    --output)
      ((i++))
      if [ ${i} -ge ${#args[@]} ]
      then
        echo "Expected argument for --output" >&2
        exit 1
      else
        arg="${args[${i}]}"
        output_file="${arg}"
      fi
      ;;
    -h|--help|/?)
      usage
      exit 1
      ;;
    *)
      if [ -z "${target}" ]
      then
        target="${arg}"
      else
        extra_args+=( "${arg}" )
      fi
      ;;
  esac
done

if [ -z "${target}" ]
then
  target="${default_target_dir}"
fi

if [ ${#extra_args[@]} -eq 0 ]
then
  extra_args+=( "${default_extra_args[@]}" )
fi

seen_first=0
while read filepath
do
  file_name="${filepath##*/}"
  if [ "${output_file}" != "${file_name}" ]
  then
    if [ ${seen_first} -eq 0 ]
    then
      if [ -n "${output_file}" ]
      then
        cat "${filepath}" >"${output_file}"
      else
        cat "${filepath}"
      fi
      seen_first=1
    else
      if [ -n "${output_file}" ]
      then
        sed 1d "${filepath}" >>"${output_file}"
      else
        sed 1d "${filepath}"
      fi
    fi
  fi
done < <(find -s "${target}" "${extra_args[@]}")

