#!/usr/bin/env bash

#Deduce this script's directory
if [ -z ${BASH_SOURCE} ]; then
  script_dir=$(readlink -f $(dirname "${0}"))
else
  script_dir="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

## Helper functions
function branches() {
  # Globals:
  #  pattern [in]  - Pattern to grep branches with, if any.
  local command

  declare -a command
  command=( git branch )
  if [ -n "${pattern}" ]
  then
    "${command[@]}" | grep "${pattern}"
  else
    "${command[@]}"
  fi
}

## Command line
declare -a args
args=( "${@}" )
args_length=${#args[@]}

function take_an_argument() {
  # Globals:
  #  i [in/out]            - Current argument index.
  #  ok_exit_code [in/out] - Current exit code.
  #  args[in]              - Array of command line arguments.
  #  args_length[in]       - Number of command line arguments.
  # Parameters:
  #  1 - Name of variable to set.
  #  2 - Parameter name in use.
  local var_name
  local param_name
  local current_value

  var_name="${1}"
  param_name="${2}"
  current_value="${!var_name}"

  if [ -n "${current_value}" ]
  then
    echo "${param_name} already set to '${current_value}'" >&2
    (( ++ok_exit_code ))
  else
    (( i++ ))
    if (( i < args_length ))
    then
      eval ${var_name}=${args[${i}]}
    else
      echo "${param_name} parameter expects an argument." >&2
      (( ++ok_exit_code ))
    fi
  fi
}

force=0
dry_run=0
default_response='n'
run_all=0
verbose=0
action=

function usage() {
  local program_name
  local this_is_default_text
  local n_is_default
  local y_is_default

  program_name="$(basename ${0})"
  this_is_default_text=' (this is the default behaviour)'
  case "${default_response}" in
    y)
      y_is_default="${this_is_default_text}"
      ;;
    n)
      n_is_default="${this_is_default_text}"
      ;;
  esac

  cat <<-EOF
${program_name} [-f|--force] [--dry-run] [--run] [-n|--no] [-y|--yes] [[-p|--pattern] PATTERN]
Ask the user if they want to delete all the git branches.

Parameters:
  -f|--force            If specified, force the branch deletion.
  --run                 Don't ask questions, just run.
  -v|--verbose          If specified, show commands.
  --dry-run             If specified, just output the commands rather than executing them.
  -n|--no               Set default response to no${n_is_default}.
  -y|--yes              Set the default response to yes${y_is_default}.
  -p|--pattern PATTERN  If specified, search for this pattern in branch names.
EOF
}

for (( i=0; i<args_length; ++i ))
do
  arg="${args[${i}]}"
  case "${arg}" in
    -f|--force)
      force=1
      ;;
    --run)
      run_all=1
      ;;
    -v|--verbose)
      verbose=1
      ;;
    --dry|--dryrun|--dry-run)
      dry_run=1
      ;;
    -n|--no)
      default_response='n'
      ;;
    -y|--yes)
      default_response='y'
      ;;
    -p|--pattern)
      take_an_argument pattern "${arg}"
      ;;
    -h|--help|/?)
      usage
      exit 1
      ;;
    *)
      if [ -z "${pattern}" ]
      then
        pattern="${arg}"
      else
        echo "Unexpected argument '${arg}'" >&2
        exit 2
      fi
      ;;
  esac
done

## Run the script
current_branch=$(git rev-parse --abbrev-ref HEAD)

while read -r branch
do
  if [ "${branch}" != "${current_branch}" ]
  then
    # If asking
    if [ ${run_all} -eq 0 ]
    then
      # Ask
      read -r -p "Delete branch '${branch}' (Y[es]/f[orce]/n[o]/a[ll]/A[ll forced]/q[uit]) [${default_response}]? " response remainder </dev/tty
      if [ -z "${response}" ]
      then
        response="${default_response}"
      fi
      response_lower="$(echo "${response}" | tr '[:upper:]' '[:lower:]')"
    else
      # Don't ask - default
      response_lower="${default_response}"
    fi

    # Determine force
    force_this=${force}
    case "${response_lower}" in
      a|all)
        run_all=1
        case "${response}" in
          A|All|ALL)
            force=1
            force_this=1
            run_all=1
            ;;
        esac
        default_response='y'
        response="${default_response}"
        response_lower="${default_response}"
        ;;
      f|force)
        action='force'
        force_this=1
        response_lower='y'
        ;;
    esac

    case "${response_lower}" in
      ''|y|yes)
        if [ ${force_this} -eq 0 ]
        then
          action='delete'
          command=( git branch -d "${branch}" )
        else
          action='delete_forced'
          command=( git branch -D "${branch}" )
        fi

        if [ ${dry_run} -ne 0 ]
        then
          echo "${command[@]}"
        else
          if [ ${verbose} -ne 0 ]
          then
            echo "${command[@]}"
          fi
          "${command[@]}"

          if git show-ref -q --heads "${branch}" # If branch still exists
          then
            case "${action}" in
              delete)
                read -r -p "Branch '${branch}' still exists. Force delete (Y[es]/n[o]/q[uit]) [${default_response}]? " retry_response remainder </dev/tty
                if [ -z "${retry_response}" ]
                then
                  retry_response="${default_response}"
                fi

                retry_response_lower="$(echo "${retry_response}" | tr '[:upper:]' '[:lower:]')"
                case "${retry_response_lower}" in
                  ''|y|yes)
                    git branch -D "${branch}"
                    ;;
                  n|no)
                    :
                    ;;
                  q|quit)
                    exit 0
                    ;;
                  *)
                    echo "Unexpected response '${retry_response}'. Skipping..." >&2
                    ;;
                esac # retry_reponse_lower
                ;;
            esac # action
          fi # Ends if branch still exists
        fi # Ends else not dry run
        ;;
      n|no)
        :
        ;;
      q|quit)
        break
        ;;
      *)
        echo "Unexpected response '${response}'. Skipping..." >&2
        ;;
    esac # response_lower
  fi
done < <(branches | cut -c 3-)

