#!/usr/bin/env bash

#Deduce this script's directory
if [ -z ${BASH_SOURCE} ]; then
  script_dir=$(readlink -f $(dirname "${0}"))
else
  script_dir="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi
ok_to_continue=1
for arg in "${@}"
do
  case "${arg}" in
    --help|-h|/?)
      echo "${0} [DIRECTORY=.]"
      echo 'Walks directory producing a script which will recreate git directory structure.'
      ok_to_continue=0
      ;;
    *)
      if [ -z "${starting_directory}" ]
      then
        if [ ! -d "${arg}" ]
        then
          echo "'${arg}' is not a directory." >&2
          starting_directory="${arg}"
          ok_to_continue=0
        else
          starting_directory="${arg}"
        fi
      else
        echo "Invalid argument: '${arg}'" >&2
        ok_to_continue=0
      fi
      ;;
  esac
done

if [ ${ok_to_continue} -ne 1 ]
then
  exit 1
fi

if [ -z "${starting_directory}" ]
then
  starting_directory=.
fi

while [ "${starting_directory:${#starting_directory}-1:${#starting_directory}}" == '/' ]
do
  starting_directory="${starting_directory:0:${#starting_directory}-1}"
done

echo '#!/usr/bin/env sh'
while read gitdir
do
  targetdir="${gitdir%%/.git}"
  parentdir="${targetdir%/*}"
  url=$(cd "${targetdir}"; git config --get remote.origin.url)

  if [ -n "${url}" ]
  then 
    echo 'echo "Checking out '"'${url}'"' in '"'${parentdir}'"'"'
    echo "mkdir -p '${parentdir}'"
    echo "pushd '${parentdir}'"
    echo "git clone '${url}'"
    echo 'popd'
    echo 'echo'
  fi
done < <(find "${starting_directory}" -type d -name '.git')

