# 10 Apr 2020 Not currently used, but a starting point.
# 29 Apr 2020 Ready for usage, Darwin and msys.

marke_local_bash_script_dir="$(dirname $(dirname ${BASH_SOURCE}))"
#echo "marke_local_bash_script_dir: '${marke_local_bash_script_dir}'"
os_name='unknown'
case $(uname -a | tr '[:upper:]' '[:lower:]') in
  *mingw64*)
    os_name='msys'
    ;;
  *cygwin*)
    os_name='cygwin'
    ;;
  *darwin*)
    os_name='darwin'
    ;;
esac

# New things (we're going to add pathfunctions here, even though we might need it system wide too).
if [ ! -f "${marke_local_bash_script_dir}/shscripts/pathfunctions" ]
then
  echo "${marke_local_bash_script_dir}/shscripts/pathfunctions not found" >&2
else
  source "${marke_local_bash_script_dir}/shscripts/pathfunctions"
fi

# Go to the shared directory
function shared() {
  pushd "${marke_local_bash_script_dir}"
}

# Go to directory on path containing file
function pushfiled() {
  if [ -z "${1}" ]
  then
    echo 'No filename specified' >&2
  else
    pushd $(dirname $(which "${1}"))
  fi
}
alias pfd=pushfiled

# What we have now based on mac...

# Default to Java 11
if [ -z "${JAVA_HOME}" ]
then
  if type j11 &>/dev/null
  then
    j11 2>/dev/null
  fi
fi

# Aliases defined before we protect alias...
__opencmd='No open command'
case "${os_name}" in
  darwin)
    __open_cmd='open'
    ;;
  msys|cygwin)
    __open_cmd='chrome'
    ;;
esac

alias gop='(url=$(git httpsurl); ${__open_cmd} "${url/publicgithub/github}")'
alias gopr='(url=$(git httpsrawurl); ${__open_cmd} "${url/publicgithub/github}/pulls")'

# source the stuff in profile.d
#  needs shared_scripts
for f in "${marke_local_bash_script_dir}/profile.d/local"/*
do
  . "${f}"
done


# Run check_ssh_agent/run-sshagent/~/temp/ssh-agent.sh
if [ -f "${marke_local_bash_script_dir}/onpath/check_ssh_agent" ]
then
  if ! "${marke_local_bash_script_dir}/onpath/check_ssh_agent"
  then
    if [ -f "${marke_local_bash_script_dir}/onpath/run_ssh_agent" ]
    then
      "${marke_local_bash_script_dir}/onpath/run_ssh_agent" 1>/dev/null
    fi
  fi

  if "${marke_local_bash_script_dir}/onpath/check_ssh_agent"
  then
    . ~/temp/ssh-agent.sh >/dev/null
  fi
fi



# Setup LS_COLORS
#prompt colours
LS_COLORS=${LS_COLORS}:'di=0;35:ln=0;36'
export LS_COLORS
if [ -z ${LSCOLORS} ]; then
  #LSCOLORS=fa
  #LSCOLORS=fagacadabaegedabagacad
  LSCOLORS=fagacadaDaegedabagacad
  export LSCOLORS
fi

# Setup git-completion.bash (which should be there)
#https://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks
source ~/.git-completion.bash

# Setup GITAWAREPROMPT
if [ -z "${NOGITAWAREPROMPT}" ] || [ ${NOGITAWAREPROMPT} -ne 1 ]
then
  GITAWAREPROMPT=~/code/thirdparty/shscripts/git-aware-prompt.git
  #export GITAWAREPROMPT=~/code/thirdparty/shscripts/git-aware-prompt.git
  source "${GITAWAREPROMPT}/main.sh"
fi

# Setup PS1
export PS1='\h:\W \u\$ '
##Off the web
#export PS1="\${debian_chroot:+(\$debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] \[$txtcyn\]\$git_branch\[$txtred\]\$git_dirty\[$txtrst\]\$ "
##Still lots of info
#export PS1="\${debian_chroot:+(\$debian_chroot)}\[\033[0;32m\]\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\] \[$txtcyn\]\$git_branch\[$txtred\]\$git_dirty\[$txtrst\]\$ "
##Paired back
export PS1="\${debian_chroot:+(\$debian_chroot)}\[\033[01;34m\]\W\[\033[00m\] \[$txtcyn\]\$git_branch\[$txtred\]\$git_dirty\[$txtrst\]\$ "


# Source gradle completion (?)
source ~/code/thirdparty/shscripts/gradle-completion.git/gradle-completion.bash

# Setup LESSPIPE
LESSPIPE="${marke_local_bash_script_dir}/shscripts/src_highlight_wrapper"
#LESSPIPE=`which src-hilite-lesspipe.sh`
export LESSOPEN="| ${LESSPIPE} %s"
export LESS="-R -X -F ${LESS}"


#Extra python script functions
# Create function wrappers for the python scripts
for f in `ls "${marke_local_bash_script_dir}/scripts"/*.py | rev | cut -d/ -f 1 | rev | cut -d. -f 1`
do
  #echo Creating ${f}
  scripty="
  ${f} () {
  ~/code/mE/shared/shared_scripts/scripts/${f}.py \"\${@}\"
}
"
#  echo "${scripty}"
#    read -r -d '' scripty << EOF
#  function ${f} () {
#    ${f}.py "\${@}"
#  }
#EOF

  eval "${scripty}"
done

# Source the stuff in ~/.profile.d
# External .profile.d sourcing
if [ -d ~/.profile.d ]
then
  for f in ~/.profile.d/*
  do
    source "${f}"
  done
fi

# Extra additions/alterations
# Set up functions for title/dirtitle
function title {
  echo -ne "\033]0;"$*"\007"
}

function dirtitle {
  title $(basename $(pwd)) "${@}"
}

# Some grep prettiness
alias grep='grep --color'


# GITHUB_USER setup
export GITHUB_USER=wafflesouffle@github.com
#function gitget() { curl -u "${GITHUB_USER}":$(cat ~/.tokens/githubread) "https://${GITHUB_HOST:-github.com}/api/v3/${@}" ; }
function gitget() { git_get ; }
export -f gitget

# checkout_org_repos function
#  Is this still needed ?
# Nope - moved to a script
#function checkout_org_repos() {
#  org=${1:-$(basename $(pwd))}
#  while read -r repo
#  do
#    echo "${repo}"
#    if [ -d "${repo}" ] || [ -d "${repo}.git" ]
#    then
#      echo 'Already present.'
#    else
#      git clone "git@${GITHUB_HOST:-github.com}:${org}/${repo}.git"
#    fi
#  done < <(git_get --org "${org}")
#  #done < <(gitget orgs/"${org}"/repos -sS | jq -r .[].name)
#}

# Choose a gradle
if type gradle6 &>/dev/null
then
  if ! which gradle 1>/dev/null 2>&1
  then
    gradle6 1>/dev/null 2>&1
  fi
fi

# Aliases for java_sys_properties, tempstore, and gdl
case "${os_name}" in
  darwin)
    # Source fzf (not a good idea on msys)
    [ -f ~/.fzf.bash ] && source ~/.fzf.bash

    __=$(brew --prefix)
    # docker completion copied from https://docs.docker.com/docker-for-mac#install-shell-completion
    [ ! -L ${__}/etc/bash_completion.d/docker ] && ln -s /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion ${__}/etc/bash_completion.d/docker
    [ ! -L ${__}/etc/bash_completion.d/docker-machine ] && ln -s /Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion ${__}/etc/bash_completion.d/docker-machine
    [ ! -L ${__}/etc/bash_completion.d/docker-compose ] && ln -s /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion ${__}/etc/bash_completion.d/docker-compose

    if [ -f ${__}/etc/bash_completion ]
    then
      . ${__}/etc/bash_completion
    fi
   ;;
esac

## Gradle Dependencies
alias gdl='gradle --console plain --info'

alias gdeps='gradle --console plain --info dependencyInsight --configuration compileClasspath --dependency'
alias grefdeps='gradle --console plain --info --write-locks resolveAllProjects --refresh-dependencies'
alias gprojects='gradle -q projects'
alias gconfigs="gradle --console plain dependencies | fgrep ' - '"
function grepjs() {
  grep --color -ri "${1}" "${2:-.}" --exclude-dir 'node_modules' --exclude-dir '.git' --exclude 'gradlew' --exclude 'yarn.lock'
}
alias gjs=grepjs

# Development stuffs
alias gcb=git_commit_branch

# Jquery magic
function jqit() {
  jq --raw-input --raw-output '. as $raw | try fromjson catch $raw | .? '"${@}"
}

# The next line updates PATH for the Google Cloud SDK.
if [ -f "${HOME}/google-cloud-sdk/path.bash.inc" ]; then . "${HOME}/google-cloud-sdk/path.bash.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "${HOME}/google-cloud-sdk/completion.bash.inc" ]; then . "${HOME}/google-cloud-sdk/completion.bash.inc"; fi

# Kubectl completion
if which kubectl &>/dev/null
then
  source /dev/stdin <<<"$(kubectl completion bash)"
  # $((( #vim syntax higlighter is having a bit of a conniption which is why this is at the bottom of the file...
  complete -f __start_kubectl k
  alias k='kubectl'
fi


