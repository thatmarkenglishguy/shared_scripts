#!/usr/bin/env sh
download_file=$(mktemp)

trap cleanup 0

function cleanup() {
  rm -f "${download_file}"
}

do_sudo=''
if command -v sudo >/dev/null
then
  do_sudo='sudo'
fi

case "$(uname -a | tr '[:upper:]' '[:lower:]')" in
  *darwin*)
    os_name='darwin'
    ;;
  *msys*|*mingw*)
    os_name='msys'
    ;;
  *)
    os_name='unknown_os'
    ;;
esac

function download_and_install() {
  local url
  local gradle_filename
  url="${1}"
  shift

  set -x
  #gradle_filename=$(echo "${latest_gradle_url}" | grep -o 'gradle-[0-9.-]\+all.zip')
  curl -L "${url}" -o "${download_file}"
  if [ ${?} -eq 0 ]
  then
    ${do_sudo} unzip "${download_file}" -d "/opt/gradle"
    cleanup
  fi
  set +x
}

function version_from_url_exists() {
  local url
  local version
  url="${1}"
  case "${os_name}" in
    darwin)
      version=$(echo "${url}" | sed -n 's!.*gradle-\([0-9\.]*\)-[:alpha:]*\.zip$!\1!p')
      ;;
    *)
      version=$(echo "${url}" | sed -n 's!.*gradle-\([0-9\.]*\)-[[:alpha:]]*\.zip$!\1!p')
      ;;
  esac

  if [ -d "/opt/gradle/gradle-${version}" ]
  then
    echo "${version} already installed"
    return 0
  else
    return 1
  fi
}

function check_download_and_install() {
  local url
  url="${1}"

  if ! version_from_url_exists "${url}"
  then
    download_and_install "${url}"
  fi
}

${do_sudo} mkdir -p /opt/gradle

release_page=$(curl -S https://gradle.org/releases/)
if [ -n "${release_page}" ]
then
  dq='"'
  sq="'"
  latest_gradle_url=$(echo "${release_page}" | grep -oh "href=[${sq}${dq}][a-zA-Z://.-]\+gradle-[0-9.]\+-all.zip" | cut -c 7- | sort -r | head -n 1)
  latest_gradle4_url=$(echo "${release_page}" | grep -oh "href=[${sq}${dq}][a-zA-Z://.-]\+gradle-4.[0-9.]\+-all.zip" | cut -c 7- | sort -t'.' -k4n | tail -n 1)
  echo "latest_gradle_url: '${latest_gradle_url}'"
  echo "latest_gradle4_url: '${latest_gradle4_url}'"

  check_download_and_install "${latest_gradle_url}"
  check_download_and_install "${latest_gradle4_url}"
fi

